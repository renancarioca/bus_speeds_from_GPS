##########################################################################
# CONTEO DE VIAJES POR SENTIDO EN LINEA 2 DE STE, UTILIZANDO DATOS DE GPS
# 15 de mayo de 2023
# REDES | Renan Carioca
##########################################################################
rm(list = ls()); gc()

require(sf)
require(dplyr)
require(rgeos)
require(spdplyr)
require(ggplot2)

source('0_R/0aux/construir_recorridos_desde_GTFS.R')
source('0_R/0aux/leer_tabla_L2.R')

# funcion - ajustar linea para grafico ------------------------------------
library(rgeos)
library(sp)

TwoBuf <- function(line, width = 90, minEx = 30) {
  
  line_ <- line %>% st_transform(crs = "+proj=utm +zone=10 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0") %>% as("Spatial")
  
  Buf0 <- gBuffer(line_, width = minEx, capStyle = "SQUARE")
  Buf1 <- gBuffer(line_, width = width, capStyle = "FLAT")
  
  disagr <- disaggregate(gDifference(Buf1, Buf0))
  disagr <- disagr[2, ]
  
  disagr <- disagr %>% st_as_sf() %>% st_transform(crs = 4326)
  disagr$tramo <- line_@data$tramo
  disagr$sentido <- line_@data$sentido
  disagr$order <- line_@data$order
  disagr$route_idx <- line_@data$route_idx
  disagr$categ.vel <- line_@data$categ.vel
  disagr$periodo <- line_@data$periodo
  disagr$tipo.dia <- line_@data$tipo.dia
  
  return(disagr)
  
}

# funcion - ggmap desde bbox ----------------------------------------------
ggmap_bbox <- function(map) {
  if (!inherits(map, "ggmap")) stop("map must be a ggmap object")
  # Extract the bounding box (in lat/lon) from the ggmap to a numeric vector,
  # and set the names to what sf::st_bbox expects:
  map_bbox <- setNames(unlist(attr(map, "bb")),
                       c("ymin", "xmin", "ymax", "xmax"))
  
  # Coonvert the bbox to an sf polygon, transform it to 3857,
  # and convert back to a bbox (convoluted, but it works)
  bbox_3857 <- st_bbox(st_transform(st_as_sfc(st_bbox(map_bbox, crs = 4326)), 3857))
  
  # Overwrite the bbox of the ggmap object with the transformed coordinates
  attr(map, "bb")$ll.lat <- bbox_3857["ymin"]
  attr(map, "bb")$ll.lon <- bbox_3857["xmin"]
  attr(map, "bb")$ur.lat <- bbox_3857["ymax"]
  attr(map, "bb")$ur.lon <- bbox_3857["xmax"]
  map
}



# funciÃ³n - separar ruta en tramos ----------------------------------------
st_split_line_from_points <- function(st_line, st_points){
  
  # st_line = rutas
  # st_points = stops_
  
  st_points <- st_points %>%
    
    arrange(route_idx, stop_sequence)
  
  split_line_ <- lapply(X = 1:nrow(st_line), FUN = function(x){
    
    route_idx_ <- st_line$route_direction[x]
    
    st_points_ <- st_points %>% filter(route_idx == route_idx_)
    st_line_ <- st_line %>% filter(route_direction == route_idx_)
    
    line_coords <- st_line_ %>%
      
      st_sample(size = 15e3, type = 'regular') %>% 
      
      st_coordinates() %>% as.data.frame() %>%
      
      select(-L1) %>%
      
      st_as_sf(coords = c("X", "Y"), crs = st_crs((st_line)))
    
    st_points_$near_feature <- lapply(X = 1:nrow(st_points_), FUN = function(y){
      
      idx_feature <- st_nearest_feature(st_points_[y, ], line_coords)
      
      return(idx_feature)
      
    }) %>% unlist
    
    split_line_2 <- lapply(X = 2:nrow(st_points_), FUN = function(z){
      
      # cat(x, '\n')
      
      point1 <- st_points_[z-1, ]
      point2 <- st_points_[z, ]
      
      point1_idx <- point1$near_feature
      point2_idx <- point2$near_feature
      
      teste <- line_coords %>%
        
        st_coordinates() %>% as.data.frame() %>%
        
        slice(point1_idx:point2_idx) %>% as.matrix %>%
        
        st_linestring(dim = "XY") %>% st_sfc(crs = st_crs(st_line_)) %>% st_as_sf %>%
        
        rename(geometry = x) %>%
        
        mutate(tramo = paste0(point1$stop_id, '->', point2$stop_id),
               sentido = point1$route_idx,
               order = z - 1)
      
      return(teste)    
      
    })
    
    split_line_3 <- do.call(rbind, split_line_2) %>% mutate(route_idx = st_line_$route_direction)
    
    return(split_line_3)
    
  })
  
  split_line <- do.call(rbind, split_line_)
  
  return(split_line)
  
}


# 0. insumos --------------------------------------------------------------
rutas <- readRDS(file = '1processed_data/STE/rutas_L2L10.RDS') %>%
  
  mutate(linea_sentido = c("L2_OE",
                           "L2_EO",
                           "L10_OE",
                           "L10_EO")) %>%
  
  filter(linea_sentido %in% c("L2_OE", "L2_EO"))

routes <- read.csv(file = '0raw_inputs/STE/GTFS/230306_gtfs/routes.txt') %>%
  
  filter(agency_id == 'TROLE') %>%
  filter(route_short_name %in% c(2))

trips_ <- read.csv(file = '0raw_inputs/STE/GTFS/230306_gtfs/trips.txt')

stop_times <- read.csv(file = '0raw_inputs/STE/GTFS/230306_gtfs/stop_times.txt') %>%
  
  left_join(y = trips_ %>% select(route_id, trip_id, direction_id), by = 'trip_id') %>%
  filter(route_id %in% routes$route_id) %>%
  
  left_join(y = routes %>% select(route_id, route_short_name), by = 'route_id') %>%
  
  mutate(route_idx = paste0(route_short_name, '-', direction_id)) %>%
  
  # group_by(stop_id) %>%
  # summarise(routes_id = paste(unique(route_idx), collapse = ','))
  
  select(stop_id, stop_sequence, route_idx)

stops_  <- read.csv(file = '0raw_inputs/STE/GTFS/230306_gtfs/stops.txt') %>%
  
  filter(stop_id %in% stop_times$stop_id) %>%
  left_join(y = stop_times, by = 'stop_id') %>%
  
  mutate(stop_lon = ifelse(test = stop_id == '0400L2-PANTITLAN', yes = -99.07404, no = stop_lon),
         stop_lat = ifelse(test = stop_id == '0400L2-PANTITLAN', yes = +19.41622, no = stop_lat)) %>% 
  
  st_as_sf(coords = c("stop_lon", "stop_lat"), crs = 4326) %>%
  
  select(-zone_id, -wheelchair_boarding) %>%
  
  filter(route_idx %in% c("2-0", "2-1")) %>%
  
  arrange(stop_sequence) %>% distinct

split_ruta <- st_split_line_from_points(st_line = rutas, st_points = stops_)

tramos_L2 <- split_ruta %>%
  
  mutate(sentido = case_when(sentido == '2-0' ~ "O >> E",
                             sentido == '2-1' ~ "E >> O"))

tramos_L2$len_ = st_length(tramos_L2) %>% as.numeric()

# Lee archivo de GPS
GPS0 <- readRDS(file = '0raw_inputs/STE/GPS/GPS_trolebus_L2.RDS') %>%
# GPS0 <- data.table::fread(input = '0raw_inputs/STE/GPS/GPS_trolebus_L2.csv') %>%
  
  distinct(buseco, timestampbus, longitude, latitude, .keep_all = T) %>%
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326) %>%
  
  mutate(idx_global = 1:n())

GPSL2_ <- GPS0 %>% as("Spatial")

# 1. process --------------------------------------------------------------
# definir puntos de corte
puntos_clave <- lapply(X = 1:nrow(tramos_L2), FUN = function(x){
  
  coords <- tramos_L2[x, ] %>% st_coordinates()
  p_init <- coords %>% head(1) %>% as.data.frame() %>%
    
    mutate(tramo = tramos_L2[x, ]$tramo,
           sentido = tramos_L2[x, ]$sentido,
           punto = 1) %>%
    
    st_as_sf(coords = c("X", "Y"), crs = 4326) 
  
  p_fim  <- coords %>% tail(1) %>% as.data.frame() %>%
    
    mutate(tramo = tramos_L2[x, ]$tramo,
           sentido = tramos_L2[x, ]$sentido,
           punto = 2) %>%
    
    st_as_sf(coords = c("X", "Y"), crs = 4326) 
  
  return(rbind(p_init, p_fim))
  
})

puntos_clave <- do.call(rbind, puntos_clave)

buffer_puntos <- puntos_clave %>% st_buffer(dist = 50)

# 
tramo_list <- puntos_clave$tramo %>% unique
tramo_list <- tramo_list[!(tramo_list %in% tramos_L2$tramo[tramos_L2$len_ == 0])]

df_velocs <- lapply(X = tramo_list, FUN = function(tramo_){
  
  # tramo_ <- tramos_L2 %>% filter(tramo == tramo_list[1])
  # tramo_ <- tramos_L2 %>% filter(tramo == "0400L2-FDOIGLESIAS1->0400L2-MIXIUHCA")
  tramo_ <- tramos_L2 %>% filter(tramo == tramo_)
  
  cat(tramo_$tramo, '\n')
  
  len_tramo <- tramo_ %>% st_length() %>% as.numeric
  sentido_tramo <- tramo_ %>% as.data.frame %>% select(sentido) %>% as.character()
  
  p1 <- buffer_puntos %>% filter(tramo == tramo_$tramo, punto == 1) %>% as("Spatial")
  p2 <- buffer_puntos %>% filter(tramo == tramo_$tramo, punto == 2) %>% as("Spatial")
  
  # FILTRAR GPS!
  buffer_tramo <- st_buffer(tramo_, dist = 30, nQuadSegs = 90) %>% as("Spatial")
  
  GPS_tramo <- GPSL2_[buffer_tramo, ]
  
  proj <- gProject(spgeom = tramo_ %>% as("Spatial"),
                   sppoint = GPS_tramo, normalized = T)*len_tramo
  
  GPS_tramo$projection <- proj
  GPS_tramo$timestampbus <- GPS_tramo$timestampbus %>% lubridate::ymd_hms()
  
  # INFERIR SENTIDO
  GPS_tramo_ <- GPS_tramo %>% st_as_sf() %>%
    
    arrange(buseco, timestampbus) %>%
    
    group_by(buseco) %>%
    
    mutate(delta_proj_before = projection - lag(projection),
           delta_time_before = (as.numeric(timestampbus) - lag(as.numeric(timestampbus)))/60,
           
           delta_proj_after = lead(projection) - (projection),
           delta_time_after = (lead(as.numeric(timestampbus)) - (as.numeric(timestampbus)))/60) %>%
    
    mutate(direction = case_when(delta_proj_before > 50 & delta_time_before <= 5 ~ tramo_$sentido,
                                 delta_proj_before < -50 & delta_time_before <= 5 ~ 'OPOSTO',
                                 delta_proj_after > 50 & delta_time_after <= 5 ~ tramo_$sentido,
                                 delta_proj_after < -50 & delta_time_after <= 5 ~ 'OPOSTO',
                                 1 == 1 ~ 'Indef')) %>%
    
    filter(direction == tramo_$sentido) %>%
    
    arrange(buseco, timestampbus) %>% 
    group_by(buseco) %>% 
    mutate(delta_time_before = (as.numeric(timestampbus) - lag(as.numeric(timestampbus)))/60,
           trip_counter = case_when(is.na(delta_time_before) ~ 0,
                                    delta_time_before > 5 ~ 1,
                                    delta_time_before <= 5 ~ 0) %>% cumsum,
           
           trip_id = paste0(buseco, '-', trip_counter)) %>% ungroup %>% as("Spatial")
  
  # PEQUENO CONSERTO ENQUANTO NAO AJEITO OS TRECHOS...
  # if(nrow(GPS_tramo_) > 0){GPS_tramo_ <- GPS_tramo_ %>% as("Spatial")}else{return(NULL)}
  
  GPSL2_p1 <- GPS_tramo_[p1, ]@data %>% filter(direction == sentido_tramo)
  GPSL2_p2 <- GPS_tramo_[p2, ]@data %>% filter(direction == sentido_tramo)
  
  GPSL2_p1 <- GPSL2_p1 %>%
    
    arrange(buseco, timestampbus) %>% 
    
    group_by(buseco, trip_id) %>%
    
    summarise(#t_min = min(timestampbus),
      #t_max = max(timestampbus),
      # t_median = median(timestampbus),
      t_avg = median(timestampbus)
    ) %>% ungroup() %>% mutate(tramo = tramo_$tramo, punto = 1)
  
  GPSL2_p2 <- GPSL2_p2 %>%
    
    arrange(buseco, timestampbus) %>% 
    
    group_by(buseco, trip_id) %>%
    
    summarise(#t_min = min(timestampbus),
      #t_max = max(timestampbus),
      # t_median = median(timestampbus),
      t_avg = median(timestampbus)
    ) %>% ungroup() %>% mutate(tramo = tramo_$tramo, punto = 2)
  
  instantes_paso_tramo <- rbind(GPSL2_p1, GPSL2_p2) %>%
    
    arrange(buseco, trip_id, t_avg) %>%
    group_by(trip_id) %>%
    
    mutate(qtd_pontos = n()) %>% filter(qtd_pontos == 2) %>%
    
    select(buseco, tramo, trip_id, punto, t_avg) %>%
    
    arrange(buseco, tramo, trip_id, t_avg)
  
  if(nrow(instantes_paso_tramo) > 0){
    
    calc_vel <- instantes_paso_tramo %>%
      
      tidyr::pivot_wider(names_from = punto, values_from = t_avg) %>%
      
      rename(t_1 = 4, t_2 = 5) %>%
      
      mutate(delta_t = as.numeric(t_2) - as.numeric(t_1),
             len_tramo = len_tramo,
             
             vel_km.h = len_tramo/delta_t*3.6)
    
    return(calc_vel)
    
  } else{return(NULL)}
  
}) %>% plyr::ldply(data.frame)

saveRDS(object = df_velocs, file = '1processed_data/STE/L2_velocidades_estimadas.RDS')

# 2. graficas -------------------------------------------------------------
df_velocs <- readRDS(file = '1processed_data/STE/L2_velocidades_estimadas.RDS')

df_velocs_ <- df_velocs %>%
  
  mutate(date = substr(t_1, 1, 10),
         hour = substr(t_1, 12, 13) %>% as.numeric) %>%
  
  select(buseco, tramo, trip_id, date, hour, vel_km.h) %>%
  
  left_join(y = tramos_L2 %>% as.data.frame %>% select(tramo, sentido, order),
            by = 'tramo')

df_velocs_horas <- df_velocs_ %>%
  
  group_by(tramo, date, hour) %>%
  
  summarise(qtd = n())

Sys.setlocale(category = 'LC_ALL', locale = 'EN_US')

df_velocs_horas <- df_velocs_ %>%
  
  mutate(periodo = case_when(hour %in% 6:9 ~ "pico maÃ±ana",
                             hour %in% 16:19 ~ "pico tarde",
                             hour %in% 10:15 ~ "entre pico",
                             1 == 1 ~ "fora pico") %>%
           
           factor(levels = c("pico maÃ±ana",
                             "entre pico",
                             "pico tarde",
                             "fora pico")),
         
         weekday_ = weekdays(as.Date(date)),
         weekday_ = case_when(weekday_ == "Saturday" ~ "SÃ¡bado",
                              weekday_ == "Sunday" ~ "Domingo",
                              1 == 1 ~ "Laboral") %>% factor(levels = c("Laboral",
                                                                        "SÃ¡bado",
                                                                        "Domingo"))) %>%
  
  group_by(tramo, periodo, weekday_, hour) %>%
  
  summarise(qtd = n(),
            q10 = quantile(vel_km.h, 0.10),
            q25 = quantile(vel_km.h, 0.25),
            q50 = quantile(vel_km.h, 0.50),
            q75 = quantile(vel_km.h, 0.75),
            q90 = quantile(vel_km.h, 0.90)) %>% ungroup %>%
  
  mutate(categ.vel = cut(x = q50,
                         breaks = c(0, 5, 10, 12.5, 15, 17.5, 20, 30, Inf),
                         labels = c(
                           "Mayor que 30",
                           "20 a 30", 
                           "17.5 a 20", 
                           "15 a 17.5",
                           "12.5 a 15",
                           "10 a 12.5",
                           "5 a 10",
                           "Menor que 5") %>% rev))

grid_periodo_dia <- expand.grid(df_velocs_horas$periodo %>% unique, df_velocs_horas$weekday_ %>% unique)

# AJUSTAR
# split_ruta_buff <- lapply(X = 1:nrow(split_ruta), FUN = function(x){
#   
#   cat(x, '\n')
#   
#   return(TwoBuf(split_ruta[x, ]))
#   
# })
# 
# split_ruta_buff <- do.call(rbind, split_ruta_buff)

rutas_veloc <- lapply(X = 1:nrow(grid_periodo_dia), FUN = function(x){
  
  periodo_ <- grid_periodo_dia$Var1[x]
  tipo_dia_ <- grid_periodo_dia$Var2[x]
  
  tramo_df <- df_velocs_horas %>% filter(periodo == periodo_, weekday_ == tipo_dia_) %>% select(tramo, categ.vel)
  
  rutas_con_veloc <- split_ruta %>% left_join(y = tramo_df, by = "tramo") %>% mutate(periodo = periodo_, tipo.dia = tipo_dia_)
  
  return(rutas_con_veloc)
  
})

rutas_veloc <- do.call(rbind, rutas_veloc)
rutas_veloc <- rutas_veloc %>%
  
  mutate(sentido = case_when(sentido == '2-0' ~ 'O >> E',
                             sentido == '2-1' ~ 'E >> O'))

source('0_R/0aux/setupgraficos.R')
require(ggplot2)
require(ggmap)

### PREP MAPS
## PICO MANANA - LABORAL + SABADO + DOMINGO
## ENTRE PICO - LABORAL + SABADO + DOMINGO
## PICO TARDE - LABORAL + SABADO + DOMINGO

# 
coords <- rutas[1, ] %>% sf::st_transform(crs = st_crs("+proj=longlat +ellps=WGS84 +datum=WGS84")) %>% st_coordinates()
long_ <- median(coords[,1])
lat_  <- median(coords[,2])

tol <- range(coords[,2]) %>% diff

ph_basemap <- get_stamenmap(bbox = c(left = min(coords[,1]) - tol,
                                     bottom = min(coords[,2]) - tol,
                                     right = max(coords[,1]) + tol,
                                     top = max(coords[,2]) + tol),
                            zoom = 13,
                            # maptype = "terrain",
                            maptype = "toner-lines",
                            crop = TRUE, force = TRUE)

map <- ggmap_bbox(ph_basemap)

pOE <- ggmap(map) +
  
  # CONJUNTO DE DADOS
  ## SE O GRAFICO USAR UM SO CONJUNTO DE DADOS (OU MAJORITARIAMENT),
  ## PODE SER MELHOR DEFINI-LO AQUI NA ENTRADA E NAO EM CADA LINHA
  # ggplot() +
  
  ## ELEMENTOS GRAFICOS
  geom_sf(data = rutas_veloc %>% 
            
            filter(periodo %in% c("pico maÃ±ana", "entre pico"),
                   tipo.dia %in% c("Laboral", "Domingo"),
                   sentido == "O >> E") %>% 
            
            sf::st_transform(crs = st_crs(3857)),
          
          mapping = aes(fill = categ.vel,
                        colour = categ.vel), lwd = 1.10, inherit.aes = F) +
  
  ## FACET, SE NECESSARIO. SUGESTAO DE DEIXAR SEMPRE FREE E AJUSTAR A ESCALA NAS FUNCOES SCALE_
  ## QUANDO UM EIXO E' DEFINIDO COMO "FREE", ELE GANHA VALORES DE ESCALA E AJUDA NA LEGIBILIDADE.
  facet_grid(periodo ~ tipo.dia) +
  
  ## EIXOS
  ## AJUSTAR LIMITES DA ESCALA AQUI, CASO NECESSARIO FIXAR UMA ESCALA UNICA PARA OS EIXOS
  
  ## TITULO, SUBTITULO
  labs(title = "Velocidad promedio en diferentes tramos de LÃ­nea 2 en STE",
       subtitle = "Sentido Oeste >> Este") +
  # subtitle = "Datos (en km/h) para diferentes corredores un periodo durante la pandemia",
  # caption = 'Fuente: elaboraciÃ³n propia utilizando datos fornecidos por la gestiÃ³n del sistema.') +
  
  ## NOME DOS EIXOS. EVITAR O EIXO Y NA VERTICAL
  ylab("") + xlab("") +
  
  ## CONFIGURACOES DE LEGENDA
  scale_fill_manual(values = c("Mayor que 30" = grad_color_8,
                               "20 a 30" = grad_color_7,
                               "17.5 a 20" = grad_color_6,
                               "15 a 17.5" = grad_color_5,
                               "12.5 a 15" = grad_color_4,
                               "10 a 12.5" = grad_color_3,
                               "5 a 10" = grad_color_2,
                               "Menor que 5" = grad_color_1)) +
  
  scale_colour_manual(values = c("Mayor que 30" = grad_color_8,
                                 "20 a 30" = grad_color_7,
                                 "17.5 a 20" = grad_color_6,
                                 "15 a 17.5" = grad_color_5,
                                 "12.5 a 15" = grad_color_4,
                                 "10 a 12.5" = grad_color_3,
                                 "5 a 10" = grad_color_2,
                                 "Menor que 5" = grad_color_1)) +
  
  guides(colour = guide_legend('Velocidad promedio (en km/h)'),
         fill = guide_legend('Velocidad promedio (en km/h)')) +
  
  ## CONFIGURACOES GERAIS
  theme(text = element_text(size = 7, family = 'Hero New', colour = color_fuente),
        title = element_text(size = 7, family = 'Hero New', colour = color_fuente),
        # plot.title = element_textbox_simple(),
        
        plot.subtitle = element_text(size = 7, family = 'Hero New', colour = color_fuente),
        legend.key = element_rect(fill = NA),
        
        axis.ticks = element_blank(),
        legend.text = element_text(size = 7, family = 'Hero New Light'),
        axis.text.y = element_blank(),
        axis.text.x = element_blank(),
        panel.background = element_rect(fill = 'white', colour = NA),
        panel.grid.minor.y = element_blank(),
        panel.grid.major.x = element_line(colour = color_lineas_eje, size = 0.25),
        panel.grid.major.y = element_line(colour = color_lineas_eje, size = 0.25),
        panel.grid.minor.x = element_blank(),
        # legend.
        # legend.title = element_text(size = 0),
        legend.position = 'top',
        strip.text = element_text(size = 7, family = 'Hero New Light', colour = color_fuente),
        strip.background = element_rect(fill = 'white', colour = NA))

pEO <- ggmap(map) +
  
  # CONJUNTO DE DADOS
  ## SE O GRAFICO USAR UM SO CONJUNTO DE DADOS (OU MAJORITARIAMENT),
  ## PODE SER MELHOR DEFINI-LO AQUI NA ENTRADA E NAO EM CADA LINHA
  # ggplot() +
  
  ## ELEMENTOS GRAFICOS
  geom_sf(data = rutas_veloc %>% 
            
            filter(periodo %in% c("pico maÃ±ana", "entre pico"),
                   tipo.dia %in% c("Laboral", "Domingo"),
                   sentido == "E >> O") %>% 
            
            sf::st_transform(crs = st_crs(3857)),
          
          mapping = aes(fill = categ.vel,
                        colour = categ.vel), lwd = 1.10, inherit.aes = F) +
  
  ## FACET, SE NECESSARIO. SUGESTAO DE DEIXAR SEMPRE FREE E AJUSTAR A ESCALA NAS FUNCOES SCALE_
  ## QUANDO UM EIXO E' DEFINIDO COMO "FREE", ELE GANHA VALORES DE ESCALA E AJUDA NA LEGIBILIDADE.
  facet_grid(periodo ~ tipo.dia) +
  
  ## EIXOS
  ## AJUSTAR LIMITES DA ESCALA AQUI, CASO NECESSARIO FIXAR UMA ESCALA UNICA PARA OS EIXOS
  
  ## TITULO, SUBTITULO
  labs(title = "Velocidad promedio en diferentes tramos de LÃ­nea 2 en STE",
       subtitle = "Sentido Este >> Oeste") +
  # subtitle = "Datos (en km/h) para diferentes corredores un periodo durante la pandemia",
  # caption = 'Fuente: elaboraciÃ³n propia utilizando datos fornecidos por la gestiÃ³n del sistema.') +
  
  ## NOME DOS EIXOS. EVITAR O EIXO Y NA VERTICAL
  ylab("") + xlab("") +
  
  ## CONFIGURACOES DE LEGENDA
  scale_fill_manual(values = c("Mayor que 30" = grad_color_8,
                               "20 a 30" = grad_color_7,
                               "17.5 a 20" = grad_color_6,
                               "15 a 17.5" = grad_color_5,
                               "12.5 a 15" = grad_color_4,
                               "10 a 12.5" = grad_color_3,
                               "5 a 10" = grad_color_2,
                               "Menor que 5" = grad_color_1)) +
  
  scale_colour_manual(values = c("Mayor que 30" = grad_color_8,
                                 "20 a 30" = grad_color_7,
                                 "17.5 a 20" = grad_color_6,
                                 "15 a 17.5" = grad_color_5,
                                 "12.5 a 15" = grad_color_4,
                                 "10 a 12.5" = grad_color_3,
                                 "5 a 10" = grad_color_2,
                                 "Menor que 5" = grad_color_1)) +
  
  guides(colour = guide_legend('Velocidad promedio (en km/h)'),
         fill = guide_legend('Velocidad promedio (en km/h)')) +
  
  ## CONFIGURACOES GERAIS
  theme(text = element_text(size = 7, family = 'Hero New', colour = color_fuente),
        title = element_text(size = 7, family = 'Hero New', colour = color_fuente),
        # plot.title = element_textbox_simple(),
        
        plot.subtitle = element_text(size = 7, family = 'Hero New', colour = color_fuente),
        legend.key = element_rect(fill = NA),
        
        axis.ticks = element_blank(),
        legend.text = element_text(size = 7, family = 'Hero New Light'),
        axis.text.y = element_blank(),
        axis.text.x = element_blank(),
        panel.background = element_rect(fill = 'white', colour = NA),
        panel.grid.minor.y = element_blank(),
        panel.grid.major.x = element_line(colour = color_lineas_eje, size = 0.25),
        panel.grid.major.y = element_line(colour = color_lineas_eje, size = 0.25),
        panel.grid.minor.x = element_blank(),
        # legend.
        # legend.title = element_text(size = 0),
        legend.position = 'top',
        strip.text = element_text(size = 7, family = 'Hero New Light', colour = color_fuente),
        strip.background = element_rect(fill = 'white', colour = NA))


ggsave(pOE, filename = '2outputs/STE/L2/Veloc_y_Tiempos_Viaje/L2_velocidad_por_tramo_OE.pdf',
       device = cairo_pdf,
       height = 8, width = 16,
       units = 'in')

ggsave(pEO, filename = '2outputs/STE/L2/Veloc_y_Tiempos_Viaje/L2_velocidad_por_tramo_EO.pdf',
       device = cairo_pdf,
       height = 8, width = 16,
       units = 'in')

ggsave(pOE, filename = '2outputs/STE/L2/Veloc_y_Tiempos_Viaje/L2_velocidad_por_tramo_OE.png',
       device = png,
       height = 4.7*1, width = 6.4*1,
       units = 'in')

ggsave(pEO, filename = '2outputs/STE/L2/Veloc_y_Tiempos_Viaje/L2_velocidad_por_tramo_EO.png',
       device = png,
       height = 4.7*1, width = 6.4*1,
       units = 'in')

